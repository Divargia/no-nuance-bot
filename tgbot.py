#  ‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà  ‚ñà‚ñà     ----------------------------------------
#      ‚ñà‚ñà         | –ê–í–¢–û–† - divargia                     |
#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà     | –ì–∏—Ç–•–∞–± - https://github.com/Divargia |
#  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà     | –¢–µ–ª–µ–≥—Ä–∞–º - @divargia                 |
#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà     ----------------------------------------
#
#  –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥–∏–≤–∏ (–¥–æ–±—Ä–∏ –∞–Ω–æ–Ω) –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–Ω–∫—Ñ.

import logging
from telegram.ext import JobQueue
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import json
import os
import time
from datetime import datetime
import asyncio
import sys

###–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

###–§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "messages_data.json"
CONFIG_FILE = "bot_config.json"
USERS_FILE = "bot_users.json"
LOG_FILE = "bot_daily_log.txt"
MUTE_QUEUE_FILE = "mute_queue.json"
BANNED_USERS_FILE = "banned_users.json"
REBOOT_STATE_FILE = "reboot_state.json"

class BotLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞ —Å –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    
    @staticmethod
    def log(message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        try:
            with open(LOG_FILE, 'a', encoding='utf-8') as f:
                f.write(log_entry)
            print(f"üìù LOG: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
    
    @staticmethod
    def get_today_logs():
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
        today = datetime.now().strftime("%Y-%m-%d")
        
        if not os.path.exists(LOG_FILE):
            return "üì≠ –õ–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."
        
        try:
            with open(LOG_FILE, 'r', encoding='utf-8') as f:
                all_logs = f.readlines()
            
            today_logs = [log for log in all_logs if log.startswith(f"[{today}")]
            
            if not today_logs:
                return "üì≠ –õ–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."
            
            return "".join(today_logs)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"

class BannedUsers:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self):
        self.banned = self.load_banned()
    
    def load_banned(self):
        if os.path.exists(BANNED_USERS_FILE):
            try:
                with open(BANNED_USERS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def save_banned(self):
        with open(BANNED_USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.banned, f, ensure_ascii=False, indent=2)
    
    def ban_user(self, user_id, username=None, reason=""):
        """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_key = str(user_id)
        self.banned[user_key] = {
            'user_id': user_id,
            'username': username,
            'banned_at': int(time.time()),
            'reason': reason
        }
        self.save_banned()
        BotLogger.log(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–±–∞–Ω–µ–Ω: {reason}")
    
    def unban_user(self, user_id):
        """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_key = str(user_id)
        if user_key in self.banned:
            username = self.banned[user_key].get('username')
            del self.banned[user_key]
            self.save_banned()
            BotLogger.log(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) —Ä–∞–∑–±–∞–Ω–µ–Ω")
            return True
        return False
    
    def is_banned(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return str(user_id) in self.banned
    
    def get_all_banned(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö"""
        return list(self.banned.values())

class RebootState:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    
    @staticmethod
    def save_reboot_info(chat_id, message_id, admin_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ"""
        reboot_info = {
            'chat_id': chat_id,
            'message_id': message_id,
            'admin_id': admin_id,
            'timestamp': int(time.time())
        }
        with open(REBOOT_STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(reboot_info, f)
    
    @staticmethod
    def get_and_clear_reboot_info():
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ"""
        if not os.path.exists(REBOOT_STATE_FILE):
            return None
        
        try:
            with open(REBOOT_STATE_FILE, 'r', encoding='utf-8') as f:
                reboot_info = json.load(f)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
            os.remove(REBOOT_STATE_FILE)
            return reboot_info
        except:
            return None

class MuteQueue:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–≥–ª—É—à–∫–∏"""
    
    def __init__(self):
        self.queue = self.load_queue()
    
    def load_queue(self):
        if os.path.exists(MUTE_QUEUE_FILE):
            try:
                with open(MUTE_QUEUE_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def save_queue(self):
        with open(MUTE_QUEUE_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.queue, f, ensure_ascii=False, indent=2)
    
    def add_message(self, user_id, message_data, timestamp):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.queue.append({
            'user_id': user_id,
            'message_data': message_data,
            'timestamp': timestamp
        })
        self.save_queue()
        BotLogger.log(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏)")
    
    def get_and_clear_queue(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—á–∏—â–∞–µ—Ç –µ—ë"""
        queue_copy = self.queue.copy()
        self.queue = []
        self.save_queue()
        return queue_copy

class BotConfig:
    def __init__(self):
        self.config = self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            # === –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
            "—Ç–æ–∫–µ–Ω-–±–æ—Ç–∞": "8384608414:AAFJdRpQvMosCUiFgmdusk3Bk3TwTAPGWZY",
            "–∞–π–¥–∏-–≥—Ä—É–ø–ø—ã": "-1002815027615",
            "–∞–π–¥–∏-–∫–∞–Ω–∞–ª–∞": "-1002879231816",
            
            # === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
            "–ø—Ä–∏–Ω–∏–º–∞—Ç—å-—Å–æ–æ–±—â–µ–Ω–∏—è": True,          # –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "–ø—Ä–∏–Ω–∏–º–∞—Ç—å-–º–µ–¥–∏–∞": True,              # –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª—ã
            "—Ä–∞—Å—Å—ã–ª–∫–∏-–≤–∫–ª—é—á–µ–Ω—ã": True,            # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏
            "–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞": False,           # –†–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏ (–Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
            
            # === –ê–ù–û–ù–ò–ú–ù–û–°–¢–¨ ===
            "–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–∞–≤—Ç–æ—Ä—ã": False,            # –°–∫—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            "–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–æ—Ç–≤–µ—Ç—ã": True,             # –°–∫—Ä—ã–≤–∞—Ç—å —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç
            
            # === –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ ===
            "–∞–¥–º–∏–Ω—ã": []                          # ID –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        }
        
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
                    for key, value in loaded_config.items():
                        if key in default_config:
                            default_config[key] = value
                    return default_config
            except:
                pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.save_config(default_config)
        return default_config
    
    def save_config(self, config=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        if config is None:
            config = self.config
        
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
    
    def get(self, key):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return self.config.get(key)
    
    def set(self, key, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        old_value = self.config.get(key)
        self.config[key] = value
        self.save_config()
        BotLogger.log(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' –∏–∑–º–µ–Ω–µ–Ω–∞: {old_value} ‚Üí {value}")

class UserStorage:
    def __init__(self):
        self.users = self.load_users()
    
    def load_users(self):
        if os.path.exists(USERS_FILE):
            try:
                with open(USERS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def save_users(self):
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.users, f, ensure_ascii=False, indent=2)
    
    def add_user(self, user_id, username=None, first_name=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
        user_key = str(user_id)
        is_new_user = user_key not in self.users
        
        self.users[user_key] = {
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'last_activity': str(int(time.time()))
        }
        self.save_users()
        
        if is_new_user:
            BotLogger.log(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username}) - –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) {'–¥–æ–±–∞–≤–ª–µ–Ω' if is_new_user else '–æ–±–Ω–æ–≤–ª—ë–Ω'} –≤ –±–∞–∑–µ")
        print(f"üîç –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(self.users)}")
    
    def get_all_users(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_list = list(self.users.values())
        print(f"üîç –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –Ω–∞–π–¥–µ–Ω–æ {len(users_list)}")
        for user in users_list:
            print(f"   - {user['user_id']} (@{user.get('username', '–Ω–µ—Ç')})")
        return users_list

class MessageStorage:
    def __init__(self):
        self.data = self.load_data()
    
    def load_data(self):
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def save_data(self):
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
    
    def store_message(self, group_message_id, user_id, message_data, username=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        key = str(group_message_id)
        self.data[key] = {
            'user_id': user_id,
            'username': username,
            'message_data': message_data
        }
        self.save_data()
    
    def get_message_data(self, group_message_id):
        return self.data.get(str(group_message_id))
    
    def remove_message(self, group_message_id):
        key = str(group_message_id)
        if key in self.data:
            del self.data[key]
            self.save_data()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
config = BotConfig()
storage = MessageStorage()
user_storage = UserStorage()
mute_queue = MuteQueue()
bot_logger = BotLogger()
banned_users = BannedUsers()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
mailing_state = {}
reboot_confirmation = {}

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in config.get('–∞–¥–º–∏–Ω—ã')

def get_message_info(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    message_data = {
        'type': 'text',
        'content': None,
        'caption': None
    }
    
    if message.text:
        message_data['type'] = 'text'
        message_data['content'] = message.text
    elif message.photo:
        message_data['type'] = 'photo'
        message_data['content'] = message.photo[-1].file_id
        message_data['caption'] = message.caption or ""
    elif message.video:
        message_data['type'] = 'video'
        message_data['content'] = message.video.file_id
        message_data['caption'] = message.caption or ""
    elif message.document:
        if message.document.mime_type and message.document.mime_type.startswith(('image/', 'video/')):
            message_data['type'] = 'document'
            message_data['content'] = message.document.file_id
            message_data['caption'] = message.caption or ""
        else:
            return None
    else:
        return None
    
    return message_data

def get_message_info_extended(message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    message_data = {
        'type': 'text',
        'content': None,
        'caption': None
    }
    
    if message.text:
        message_data['type'] = 'text'
        message_data['content'] = message.text
    elif message.photo:
        message_data['type'] = 'photo'
        message_data['content'] = message.photo[-1].file_id
        message_data['caption'] = message.caption or ""
    elif message.video:
        message_data['type'] = 'video'
        message_data['content'] = message.video.file_id
        message_data['caption'] = message.caption or ""
    elif message.document:
        message_data['type'] = 'document'
        message_data['content'] = message.document.file_id
        message_data['caption'] = message.caption or ""
    elif message.animation:
        message_data['type'] = 'animation'
        message_data['content'] = message.animation.file_id
        message_data['caption'] = message.caption or ""
    elif message.voice:
        message_data['type'] = 'voice'
        message_data['content'] = message.voice.file_id
        message_data['caption'] = message.caption or ""
    elif message.audio:
        message_data['type'] = 'audio'
        message_data['content'] = message.audio.file_id
        message_data['caption'] = message.caption or ""
    else:
        return None
    
    return message_data

async def send_mailing_message(context, chat_id, message_data, mailing_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if message_data['type'] == 'text':
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            )
        elif message_data['type'] == 'photo':
            caption = f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=message_data['content'],
                caption=caption
            )
        elif message_data['type'] == 'video':
            caption = f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            await context.bot.send_video(
                chat_id=chat_id,
                video=message_data['content'],
                caption=caption
            )
        elif message_data['type'] == 'document':
            caption = f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            await context.bot.send_document(
                chat_id=chat_id,
                document=message_data['content'],
                caption=caption
            )
        elif message_data['type'] == 'animation':
            caption = f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            await context.bot.send_animation(
                chat_id=chat_id,
                animation=message_data['content'],
                caption=caption
            )
        elif message_data['type'] == 'voice':
            await context.bot.send_voice(
                chat_id=chat_id,
                voice=message_data['content']
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            )
        elif message_data['type'] == 'audio':
            caption = f"üì¢ –†–ê–°–°–´–õ–ö–ê:\n\n{mailing_text}"
            await context.bot.send_audio(
                chat_id=chat_id,
                audio=message_data['content'],
                caption=caption
            )
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False

async def send_message_to_group(context, message_data, author_info, reply_markup):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    group_id = config.get('–∞–π–¥–∏-–≥—Ä—É–ø–ø—ã')
    
    if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–∞–≤—Ç–æ—Ä—ã'):
        author_text = "üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        author_text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author_info}"
    
    if message_data['type'] == 'text':
        forward_text = f"{author_text}:\n\n{message_data['content']}"
        return await context.bot.send_message(
            chat_id=group_id,
            text=forward_text,
            reply_markup=reply_markup
        )
    elif message_data['type'] == 'photo':
        caption = author_text
        if message_data['caption']:
            caption += f":\n\n{message_data['caption']}"
        return await context.bot.send_photo(
            chat_id=group_id,
            photo=message_data['content'],
            caption=caption,
            reply_markup=reply_markup
        )
    elif message_data['type'] == 'video':
        caption = author_text
        if message_data['caption']:
            caption += f":\n\n{message_data['caption']}"
        return await context.bot.send_video(
            chat_id=group_id,
            video=message_data['content'],
            caption=caption,
            reply_markup=reply_markup
        )
    elif message_data['type'] == 'document':
        caption = author_text
        if message_data['caption']:
            caption += f":\n\n{message_data['caption']}"
        return await context.bot.send_document(
            chat_id=group_id,
            document=message_data['content'],
            caption=caption,
            reply_markup=reply_markup
        )

async def send_message_to_channel(context, message_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
    channel_id = config.get('–∞–π–¥–∏-–∫–∞–Ω–∞–ª–∞')
    
    if message_data['type'] == 'text':
        return await context.bot.send_message(
            chat_id=channel_id,
            text=message_data['content']
        )
    elif message_data['type'] == 'photo':
        return await context.bot.send_photo(
            chat_id=channel_id,
            photo=message_data['content'],
            caption=message_data['caption']
        )
    elif message_data['type'] == 'video':
        return await context.bot.send_video(
            chat_id=channel_id,
            video=message_data['content'],
            caption=message_data['caption']
        )
    elif message_data['type'] == 'document':
        return await context.bot.send_document(
            chat_id=channel_id,
            document=message_data['content'],
            caption=message_data['caption']
        )

async def process_queued_messages(context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏"""
    queued_messages = mute_queue.get_and_clear_queue()
    
    if not queued_messages:
        return
    
    BotLogger.log(f"üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(queued_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
    
    for queued_msg in queued_messages:
        try:
            user_id = queued_msg['user_id']
            message_data = queued_msg['message_data']
            
            keyboard = [[InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="publish")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            user_info = user_storage.users.get(str(user_id), {})
            username = user_info.get('username')
            first_name = user_info.get('first_name')
            author_info = f"@{username}" if username else first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
            sent_message = await send_message_to_group(context, message_data, author_info, reply_markup)
            
            storage.store_message(
                group_message_id=sent_message.message_id,
                user_id=user_id,
                message_data=message_data,
                username=username or first_name
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥–ª—É—à–∫–∏) –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!"
            )
            
            BotLogger.log(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ /start
    user_storage.add_user(user.id, user.username, user.first_name)
    
    if not config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-—Å–æ–æ–±—â–µ–Ω–∏—è'):
        await update.message.reply_text("üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    help_text = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
    help_text += "üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç - —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É\n"
    
    if config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-–º–µ–¥–∏–∞'):
        help_text += "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ - —è —Ç–æ–∂–µ –∏—Ö –ø–µ—Ä–µ—à–ª—é\n"
    
    help_text += "\nüí° –í –≥—Ä—É–ø–ø–µ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª"
    
    if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–∞–≤—Ç–æ—Ä—ã'):
        help_text += "\nüï∂ –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞"
    
    await update.message.reply_text(help_text)

async def handle_mailing_or_regular_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if banned_users.is_banned(user.id):
        await message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        BotLogger.log(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_storage.add_user(user.id, user.username, user.first_name)
    
    print(f"üîç –û–ë–†–ê–ë–û–¢–ß–ò–ö: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: '{message.text if message.text else '–º–µ–¥–∏–∞'}'")
    print(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing_state}")
    print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω: {is_admin(user.id)}")
    
    # –†–ê–°–°–´–õ–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–û–í (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞)
    if user.id in mailing_state and mailing_state[user.id]:
        print(f"üì¢ >>> –ó–ê–ü–£–°–ö–ê–ï–ú –†–ê–°–°–´–õ–ö–£ –û–¢ –ê–î–ú–ò–ù–ê <<<")
        mailing_state[user.id] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = get_message_info_extended(message)
        
        if not message_data:
            await message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = user_storage.get_all_users()
        
        if not all_users:
            await message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        success_count = 0
        error_count = 0
        
        status_message = await message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        BotLogger.log(f"üì¢ –ê–¥–º–∏–Ω {user.id} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        mailing_text = message.text or message.caption or "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª"
        
        for user_data in all_users:
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–∞–º–æ–º—É —Å–µ–±–µ –∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º
            if user_data['user_id'] != user.id and not banned_users.is_banned(user_data['user_id']):
                success = await send_mailing_message(
                    context, 
                    user_data['user_id'], 
                    message_data, 
                    mailing_text
                )
                if success:
                    success_count += 1
                    print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['user_id']}")
                else:
                    error_count += 1
        
        # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        BotLogger.log(f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}")
        
        await status_message.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}"
        )
        return
    
    # –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
    if message.chat.type != 'private':
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π
    if not config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-—Å–æ–æ–±—â–µ–Ω–∏—è'):
        await message.reply_text("üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    # –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –ó–ê–ì–õ–£–®–ö–ò
    if config.get('–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞'):
        try:
            message_info = get_message_info(message)
            if message_info:
                mute_queue.add_message(user.id, message_info, int(time.time()))
                await message.reply_text("üîá –°–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–µ–Ω—ã. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
    
    try:
        message_info = get_message_info(message)

        if not message_info:
            await message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
        if message_info['type'] != 'text' and not config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-–º–µ–¥–∏–∞'):
            await message.reply_text("üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        BotLogger.log(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} (@{user.username}): {message_info['type']}")
        
        keyboard = [[InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="publish")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        author_info = f"@{user.username}" if user.username else user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        sent_message = await send_message_to_group(context, message_info, author_info, reply_markup)
        
        storage.store_message(
            group_message_id=sent_message.message_id,
            user_id=user.id,
            message_data=message_info,
            username=user.username or user.first_name
        )
        
        await message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")
        BotLogger.log(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if query.data.startswith("config_"):
        if not is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
            return
        
        config_key = query.data.replace("config_", "")
        current_value = config.get(config_key)
        
        if isinstance(current_value, bool):
            new_value = not current_value
            config.set(config_key, new_value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = get_config_keyboard()
            await query.edit_message_reply_markup(reply_markup=keyboard)
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    if query.data == "confirm_reboot":
        if user_id not in reboot_confirmation:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
            return
        
        del reboot_confirmation[user_id]
        BotLogger.log(f"üîÑ –ê–¥–º–∏–Ω {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–æ—Ç–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        RebootState.save_reboot_info(
            query.message.chat_id,
            query.message.message_id,
            user_id
        )
        
        await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞...")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        os.execv(sys.executable, [sys.executable] + sys.argv)
    
    if query.data == "cancel_reboot":
        if user_id in reboot_confirmation:
            del reboot_confirmation[user_id]
        await query.edit_message_text("‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
    if query.data == "publish":
        message_id = query.message.message_id
        stored_data = storage.get_message_data(message_id)
        
        if not stored_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        message_data = stored_data['message_data']
        user_id = stored_data['user_id']
        
        try:
            await send_message_to_channel(context, message_data)
            
            BotLogger.log(f"üì∫ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")
            
            await context.bot.send_message(
                chat_id=user_id,
                text="üéâ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
            )
            
            await context.bot.delete_message(
                chat_id=config.get('–∞–π–¥–∏-–≥—Ä—É–ø–ø—ã'),
                message_id=message_id
            )
            
            storage.remove_message(message_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ"""
    message = update.message
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if message.reply_to_message and message.reply_to_message.from_user.id == context.bot.id:
        replied_message_id = message.reply_to_message.message_id
        stored_data = storage.get_message_data(replied_message_id)
        
        if stored_data:
            original_author_id = stored_data['user_id']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–æ—Ç–≤–µ—Ç—ã'):
                reply_text = f"üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:\n\n"
            else:
                commenter = f"@{user.username}" if user.username else user.first_name or "–ê–Ω–æ–Ω–∏–º"
                reply_text = f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {commenter}:\n\n"
            
            reply_text += message.text or "üìé –ú–µ–¥–∏–∞-—Ñ–∞–π–ª"
            
            try:
                await context.bot.send_message(
                    chat_id=original_author_id,
                    text=reply_text
                )
                
                BotLogger.log(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_author_id}")
                
                confirm_text = "‚úÖ –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–æ—Ç–≤–µ—Ç—ã') else "‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É!"
                confirmation = await message.reply_text(confirm_text)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    await context.bot.delete_message(
                        chat_id=config.get('–∞–π–¥–∏-–≥—Ä—É–ø–ø—ã'),
                        message_id=message.message_id
                    )
                    
                    await asyncio.sleep(3)
                    await context.bot.delete_message(
                        chat_id=config.get('–∞–π–¥–∏-–≥—Ä—É–ø–ø—ã'),
                        message_id=confirmation.message_id
                    )
                except:
                    pass
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

def get_config_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    keyboard = []
    
    config_items = [
        ("–ø—Ä–∏–Ω–∏–º–∞—Ç—å-—Å–æ–æ–±—â–µ–Ω–∏—è", "üìù –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π"),
        ("–ø—Ä–∏–Ω–∏–º–∞—Ç—å-–º–µ–¥–∏–∞", "üì∏ –ü—Ä–∏—ë–º –º–µ–¥–∏–∞"),
        ("—Ä–∞—Å—Å—ã–ª–∫–∏-–≤–∫–ª—é—á–µ–Ω—ã", "üì¢ –†–∞—Å—Å—ã–ª–∫–∏"),
        ("–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞", "üîá –ó–∞–≥–ª—É—à–∫–∞"),
        ("–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–∞–≤—Ç–æ—Ä—ã", "üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã"),
        ("–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–æ—Ç–≤–µ—Ç—ã", "üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    ]
    
    for config_key, display_name in config_items:
        current_value = config.get(config_key)
        status = "‚úÖ" if current_value else "‚ùå"
        button_text = f"{display_name}: {status}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"config_{config_key}")])
    
    return InlineKeyboardMarkup(keyboard)

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    all_users = user_storage.get_all_users()
    
    if not all_users:
        await update.message.reply_text("üì≠ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.")
        return
    
    users_text = f"üë• –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(all_users)}):\n\n"
    
    for i, user_data in enumerate(all_users, 1):
        username = user_data.get('username', '–Ω–µ—Ç')
        first_name = user_data.get('first_name', '–Ω–µ—Ç')
        users_text += f"{i}. ID: {user_data['user_id']}\n"
        users_text += f"   @{username} | {first_name}\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(users_text) > 3500:
            users_text += f"... –∏ –µ—â—ë {len(all_users) - i} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            break
    
    await update.message.reply_text(users_text)

async def mailing_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /mailing –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç –ê–¥–º–∏–Ω—ã: {config.get('–∞–¥–º–∏–Ω—ã')}")
    print(f"üîç –†–∞—Å—Å—ã–ª–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã: {config.get('—Ä–∞—Å—Å—ã–ª–∫–∏-–≤–∫–ª—é—á–µ–Ω—ã')}")
    
    if not config.get('—Ä–∞—Å—Å—ã–ª–∫–∏-–≤–∫–ª—é—á–µ–Ω—ã'):
        await update.message.reply_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = user_storage.get_all_users()
    user_count = len(all_users)
    
    if user_count == 0:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    mailing_state[user_id] = True
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏")
    print(f"üîç –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {mailing_state}")
    
    await update.message.reply_text(
        f"üì¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª), –∏ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
    )

async def archive_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤.")
        return
    
    today_logs = BotLogger.get_today_logs()
    
    if today_logs == "üì≠ –õ–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.":
        await update.message.reply_text(today_logs)
        return
    
    # –ï—Å–ª–∏ –ª–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
    if len(today_logs) > 4000:
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏
            temp_filename = f"logs_{datetime.now().strftime('%Y-%m-%d')}.txt"
            with open(temp_filename, 'w', encoding='utf-8') as f:
                f.write(today_logs)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(temp_filename, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=temp_filename,
                    caption=f"üìã –õ–æ–≥–∏ –∑–∞ {datetime.now().strftime('%Y-%m-%d')}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_filename)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.")
    else:
        await update.message.reply_text(f"üìã –õ–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{today_logs}")

async def configure_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
        return
    
    keyboard = get_config_keyboard()
    
    config_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
    config_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É:"
    
    await update.message.reply_text(config_text, reply_markup=keyboard)

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∑–∞–≥–ª—É—à–∫–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–æ–π.")
        return
    
    current_mute = config.get('–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞')
    new_mute = not current_mute
    
    if new_mute:
        # –í–∫–ª—é—á–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        config.set('–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞', True)
        await update.message.reply_text(
            "üîá –ó–∞–≥–ª—É—à–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!\n\n"
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏."
        )
        BotLogger.log(f"üîá –ê–¥–º–∏–Ω {user_id} –≤–∫–ª—é—á–∏–ª –∑–∞–≥–ª—É—à–∫—É")
    else:
        # –í—ã–∫–ª—é—á–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        config.set('–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞', False)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        queued_count = len(mute_queue.queue)
        
        await update.message.reply_text(
            f"üîä –ó–∞–≥–ª—É—à–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!\n\n"
            f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {queued_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏..."
        )
        
        BotLogger.log(f"üîä –ê–¥–º–∏–Ω {user_id} –≤—ã–∫–ª—é—á–∏–ª –∑–∞–≥–ª—É—à–∫—É, –≤ –æ—á–µ—Ä–µ–¥–∏ {queued_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        await process_queued_messages(context)
        
        await update.message.reply_text("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

async def reboot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    reboot_confirmation[user_id] = True
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="confirm_reboot"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reboot")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–æ—Ç–∞\n\n"
        "‚ö†Ô∏è –í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–µ—Ä–≤–∞–Ω—ã.\n"
        "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=reply_markup
    )

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    replied_message_id = update.message.reply_to_message.message_id
    stored_data = storage.get_message_data(replied_message_id)
    
    if not stored_data:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    banned_user_id = stored_data['user_id']
    banned_username = stored_data['username']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    reason = ' '.join(context.args) if context.args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    banned_users.ban_user(banned_user_id, banned_username, reason)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –±–∞–Ω–µ
    await update.message.reply_text(
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {banned_user_id} (@{banned_username}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=banned_user_id,
            text=f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except:
        pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: /unban 123456789")
        return
    
    try:
        unban_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    if banned_users.unban_user(unban_user_id):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unban_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=unban_user_id,
                text="‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
        except:
            pass
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
        return
    
    banned_list = banned_users.get_all_banned()
    
    if not banned_list:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    
    ban_text = f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_list)}):\n\n"
    
    for i, banned_user in enumerate(banned_list, 1):
        username = banned_user.get('username', '–Ω–µ—Ç')
        reason = banned_user.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        ban_date = datetime.fromtimestamp(banned_user.get('banned_at', 0)).strftime('%Y-%m-%d %H:%M')
        
        ban_text += f"{i}. ID: {banned_user['user_id']}\n"
        ban_text += f"   @{username}\n"
        ban_text += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        ban_text += f"   üìÖ –î–∞—Ç–∞: {ban_date}\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(ban_text) > 3500:
            ban_text += f"... –∏ –µ—â—ë {len(banned_list) - i} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            break
    
    await update.message.reply_text(ban_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    reboot_info = RebootState.get_and_clear_reboot_info()
    
    application = Application.builder().token(config.get('—Ç–æ–∫–µ–Ω-–±–æ—Ç–∞')).build()
    job_queue = JobQueue()
    job_queue.set_application(application)
    job_queue.start()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mailing", mailing_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CommandHandler("archive", archive_command))
    application.add_handler(CommandHandler("configure", configure_command))
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("reboot", reboot_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("banlist", banlist_command))
    
    # –ï–î–ò–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
    application.add_handler(MessageHandler(
        (filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL | 
         filters.ANIMATION | filters.VOICE | filters.AUDIO) & 
        filters.ChatType.PRIVATE & ~filters.COMMAND,
        handle_mailing_or_regular_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã)
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS & filters.REPLY, 
        handle_group_message
    ))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
    if reboot_info:
        application.job_queue.run_once(
            lambda context: asyncio.create_task(notify_reboot_complete(application, reboot_info)),
            when=2
        )

    # –ó–∞–ø—É—Å–∫
    BotLogger.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
    print(f"üìù –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-—Å–æ–æ–±—â–µ–Ω–∏—è') else '‚ùå'}")
    print(f"üì∏ –ü—Ä–∏—ë–º –º–µ–¥–∏–∞: {'‚úÖ' if config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-–º–µ–¥–∏–∞') else '‚ùå'}")
    print(f"üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã: {'‚úÖ' if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–∞–≤—Ç–æ—Ä—ã') else '‚ùå'}")
    print(f"üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {'‚úÖ' if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–æ—Ç–≤–µ—Ç—ã') else '‚ùå'}")
    print(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞: {'‚úÖ' if config.get('—Ä–∞—Å—Å—ã–ª–∫–∏-–≤–∫–ª—é—á–µ–Ω—ã') else '‚ùå'}")
    print(f"üîá –ó–∞–≥–ª—É—à–∫–∞: {'‚úÖ' if config.get('–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞') else '‚ùå'}")
    print(f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(banned_users.get_all_banned())}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def setup_reboot_notification():
    if reboot_info:
        await notify_reboot_complete(application, reboot_info)
# –ó–∞–ø—É—Å–∫
    BotLogger.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
    print(f"üìù –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-—Å–æ–æ–±—â–µ–Ω–∏—è') else '‚ùå'}")
    print(f"üì∏ –ü—Ä–∏—ë–º –º–µ–¥–∏–∞: {'‚úÖ' if config.get('–ø—Ä–∏–Ω–∏–º–∞—Ç—å-–º–µ–¥–∏–∞') else '‚ùå'}")
    print(f"üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã: {'‚úÖ' if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–∞–≤—Ç–æ—Ä—ã') else '‚ùå'}")
    print(f"üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {'‚úÖ' if config.get('–∞–Ω–æ–Ω–∏–º–Ω—ã–µ-–æ—Ç–≤–µ—Ç—ã') else '‚ùå'}")
    print(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞: {'‚úÖ' if config.get('—Ä–∞—Å—Å—ã–ª–∫–∏-–≤–∫–ª—é—á–µ–Ω—ã') else '‚ùå'}")
    print(f"üîá –ó–∞–≥–ª—É—à–∫–∞: {'‚úÖ' if config.get('–∑–∞–≥–ª—É—à–∫–∞-–≤–∫–ª—é—á–µ–Ω–∞') else '‚ùå'}")
    print(f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(banned_users.get_all_banned())}")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def notify_reboot_complete(application, reboot_info):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    try:
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
        await asyncio.sleep(2)
        
        await application.bot.edit_message_text(
            chat_id=reboot_info['chat_id'],
            message_id=reboot_info['message_id'],
            text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!\n\nü§ñ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç."
        )
        
        BotLogger.log(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {reboot_info['admin_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")

if __name__ == '__main__':
    main()
